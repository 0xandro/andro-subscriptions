{
  "address": "0xc499fb345dBEb6A4288dD43d666E798da669e210",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EntranceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseFee",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "Unsubscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOfSubscribers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setEntranceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscriber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x06fe0738249bfc6610ab30bcd6f6d81765c31c319f549c3e156687ca87009760",
  "receipt": {
    "to": null,
    "from": "0x4A96fF90Ab5041De4568fEc6eF0c818F73fA2a3D",
    "contractAddress": "0xc499fb345dBEb6A4288dD43d666E798da669e210",
    "transactionIndex": 2,
    "gasUsed": "627399",
    "logsBloom": "0x
    "blockHash": "0xcd0dd4430ce24d2307710ddd4d5c6f0facd7610a8713cd3b75429d626e303f78",
    "transactionHash": "0x06fe0738249bfc6610ab30bcd6f6d81765c31c319f549c3e156687ca87009760",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 32335608,
        "transactionHash": "0x06fe0738249bfc6610ab30bcd6f6d81765c31c319f549c3e156687ca87009760",
        "address": "0xc499fb345dBEb6A4288dD43d666E798da669e210",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a96ff90ab5041de4568fec6ef0c818f73fa2a3d"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xcd0dd4430ce24d2307710ddd4d5c6f0facd7610a8713cd3b75429d626e303f78"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 32335608,
        "transactionHash": "0x06fe0738249bfc6610ab30bcd6f6d81765c31c319f549c3e156687ca87009760",
        "address": "0xc499fb345dBEb6A4288dD43d666E798da669e210",
        "topics": [
          "0x1004d8bfa7cdb21aa74a7128d4f5dd91f90a74171ce5e12b65861294fc3587ee",
          "0x0000000000000000000000004a96ff90ab5041de4568fec6ef0c818f73fa2a3d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 8,
        "blockHash": "0xcd0dd4430ce24d2307710ddd4d5c6f0facd7610a8713cd3b75429d626e303f78"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 32335608,
        "transactionHash": "0x06fe0738249bfc6610ab30bcd6f6d81765c31c319f549c3e156687ca87009760",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a96ff90ab5041de4568fec6ef0c818f73fa2a3d",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f9e3d5758428f00000000000000000000000000000000000000000000000003346281fdc4f284000000000000000000000000000000000000000000000dbb95271a7da30924960000000000000000000000000000000000000000000000000324c444a66caff5000000000000000000000000000000000000000000000dbb9536b8bafa616725",
        "logIndex": 9,
        "blockHash": "0xcd0dd4430ce24d2307710ddd4d5c6f0facd7610a8713cd3b75429d626e303f78"
      }
    ],
    "blockNumber": 32335608,
    "cumulativeGasUsed": "745434",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1"
  ],
  "numDeployments": 3,
  "solcInputHash": "f90d266a1c5285198fbe9e7e53415152",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EntranceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"Unsubscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfSubscribers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setEntranceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Andro Labs Development Team.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"subscribe()\":{\"details\":\"Adds user to subscriber mapping and increase subscribers count.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unsubscribe()\":{\"details\":\"Decreases number of total subscribed users.Can only unsubscribe if subscribed previously.\"}},\"title\":\"Subscription by Andro.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEntranceFee(uint256)\":{\"notice\":\"Let owner set entrance fee.\"},\"subscribe()\":{\"notice\":\"Subscribe\"},\"unsubscribe()\":{\"notice\":\"Unsubscribed users will not be eligible.\"},\"withdraw(address)\":{\"notice\":\"Let owner withdraw funds collected by the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Subscription.sol\":\"Subscription\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Subscription.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\nAndro Subscription Smart Contract Disclaimer.\\n\\nThe Andro Subscription Smart Contract was developed by Andro Labs Development Team. The provided\\ncontract enables a user-friendly interface to subscribe to future prizes and benefits granted\\nafter the official release of the protocol. This Smart Contract is composed of open-source\\nand well-tested code deployed on the blockchain.\\n*/\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/**\\n* @title Subscription by Andro.\\n* @author Andro Labs Development Team.\\n*/\\ncontract Subscription is Ownable, Pausable {\\n\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter public numOfSubscribers;\\n    uint256 public entranceFee;\\n\\n    mapping (address => bool) public subscriber;\\n\\n    event Subscribed(address indexed subscriber, uint256 paidFee, uint256 baseFee);\\n    event Withdraw(uint256 balance, address indexed to, address indexed owner);\\n    event EntranceFeeSet(uint256 fee, address indexed owner);\\n    event Unsubscribed(address subscriber);\\n\\n\\n    constructor(uint256 _entranceFee) {\\n        entranceFee = _entranceFee;\\n        emit EntranceFeeSet(_entranceFee, owner());\\n    }\\n\\n    /**\\n    * @notice Subscribe\\n    * @dev Adds user to subscriber mapping and increase subscribers count.\\n    */\\n    function subscribe() \\n        external\\n        payable \\n        whenNotPaused\\n    {\\n        require(!subscriber[msg.sender], \\\"SUBSCRIPTION: ALREADY_SUBSCRIBED\\\");\\n        require(msg.value >= entranceFee, \\\"SUBSCRIPTION: NOT_ENOUGH_BALANCE_FEE\\\");\\n\\n        numOfSubscribers.increment();\\n        subscriber[msg.sender] = true;\\n\\n        emit Subscribed(msg.sender, msg.value, entranceFee);\\n    }\\n\\n    /**\\n    * @notice Unsubscribed users will not be eligible.\\n    * @dev Decreases number of total subscribed users.\\n    * @dev Can only unsubscribe if subscribed previously.\\n    */\\n    function unsubscribe() \\n        external \\n        whenNotPaused\\n    {\\n        require(subscriber[msg.sender], \\\"SUBSCRIPTION: NOT_SUBSCRIBED\\\");\\n        assert(numOfSubscribers.current() > 0);\\n\\n        numOfSubscribers.decrement();\\n        delete subscriber[msg.sender];\\n\\n        emit Unsubscribed(msg.sender);\\n    }\\n\\n    /** \\n    * @notice Let owner withdraw funds collected by the contract.\\n    */\\n    function withdraw(address _to)\\n        external\\n        onlyOwner\\n    {\\n        require(_to != address(0), \\\"SUBSCRIPTION: ADDRESS 0\\\");\\n\\n        uint256 contractBalance = address(this).balance;\\n\\n        (bool success, ) = _to.call{value: contractBalance}(\\\"\\\");\\n        require(success, \\\"SUBSCRIPTION: WITHDRAW_FAILED\\\");\\n\\n        emit Withdraw(contractBalance, _to, owner());\\n    }\\n\\n    /**\\n    * @notice Let owner set entrance fee.\\n    */\\n    function setEntranceFee(uint256 _fee)\\n        external\\n        onlyOwner\\n    {\\n        entranceFee = _fee;\\n\\n        emit EntranceFeeSet(_fee, msg.sender);\\n    }\\n\\n    function pause()\\n        external\\n        onlyOwner\\n    {\\n        _pause();\\n    }\\n\\n    function unpause()\\n        external\\n        onlyOwner\\n    {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xdedc8df2e695c44b3d493ba124a8cec5515055bd4d3a117296767280abce1fd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a89380380610a8983398101604081905261002f916100ed565b6100383361009d565b6000805460ff60a01b19811690915560028290556001600160a01b03166001600160a01b03167f1004d8bfa7cdb21aa74a7128d4f5dd91f90a74171ce5e12b65861294fc3587ee8260405161008f91815260200190565b60405180910390a250610106565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ff57600080fd5b5051919050565b610974806101156000396000f3fe6080604052600436106100c65760003560e01c80638456cb591161007f578063d720e08911610059578063d720e089146101eb578063f2fde38b14610202578063fcae448414610222578063fe56f5a01461023757600080fd5b80638456cb59146101a65780638da5cb5b146101bb5780638f449a05146101e357600080fd5b80630b12323f146100d25780633f4ba83a1461011757806351cff8d91461012e5780635c975abb1461014e578063649677e11461016d578063715018a61461019157600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506101026100ed3660046108df565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c610257565b005b34801561013a57600080fd5b5061012c6101493660046108df565b610269565b34801561015a57600080fd5b50600054600160a01b900460ff16610102565b34801561017957600080fd5b5061018360025481565b60405190815260200161010e565b34801561019d57600080fd5b5061012c6103cc565b3480156101b257600080fd5b5061012c6103de565b3480156101c757600080fd5b506000546040516001600160a01b03909116815260200161010e565b61012c6103ee565b3480156101f757600080fd5b506001546101839081565b34801561020e57600080fd5b5061012c61021d3660046108df565b610519565b34801561022e57600080fd5b5061012c610592565b34801561024357600080fd5b5061012c61025236600461090f565b610669565b61025f6106ae565b610267610708565b565b6102716106ae565b6001600160a01b0381166102cc5760405162461bcd60e51b815260206004820152601760248201527f535542534352495054494f4e3a2041444452455353203000000000000000000060448201526064015b60405180910390fd5b60405147906000906001600160a01b0384169083908381818185875af1925050503d8060008114610319576040519150601f19603f3d011682016040523d82523d6000602084013e61031e565b606091505b505090508061036f5760405162461bcd60e51b815260206004820152601d60248201527f535542534352495054494f4e3a2057495448445241575f4641494c454400000060448201526064016102c3565b6000546001600160a01b03166001600160a01b0316836001600160a01b03167fa51bb7c2c2049ab09fbff5561211a4ee34b3b4cee74c42f1bce5461cd4ef3f8d846040516103bf91815260200190565b60405180910390a3505050565b6103d46106ae565b6102676000610758565b6103e66106ae565b6102676107a8565b6103f66107eb565b3360009081526003602052604090205460ff16156104565760405162461bcd60e51b815260206004820181905260248201527f535542534352495054494f4e3a20414c52454144595f5355425343524942454460448201526064016102c3565b6002543410156104b45760405162461bcd60e51b8152602060048201526024808201527f535542534352495054494f4e3a204e4f545f454e4f5547485f42414c414e43456044820152635f46454560e01b60648201526084016102c3565b6104c2600180546001019055565b33600081815260036020908152604091829020805460ff191660011790556002548251348152918201527ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f910160405180910390a2565b6105216106ae565b6001600160a01b0381166105865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c3565b61058f81610758565b50565b61059a6107eb565b3360009081526003602052604090205460ff166105f95760405162461bcd60e51b815260206004820152601c60248201527f535542534352495054494f4e3a204e4f545f535542534352494245440000000060448201526064016102c3565b600061060460015490565b1161061157610611610928565b61061b6001610838565b33600081815260036020908152604091829020805460ff1916905590519182527fae563681ccc696fae58fe830f401bc9c043a43ddb9f7c2830b32c3c70d9966e791015b60405180910390a1565b6106716106ae565b600281905560405181815233907f1004d8bfa7cdb21aa74a7128d4f5dd91f90a74171ce5e12b65861294fc3587ee9060200160405180910390a250565b6000546001600160a01b031633146102675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c3565b61071061088f565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200161065f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107b06107eb565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107403390565b600054600160a01b900460ff16156102675760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102c3565b8054806108875760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016102c3565b600019019055565b600054600160a01b900460ff166102675760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102c3565b6000602082840312156108f157600080fd5b81356001600160a01b038116811461090857600080fd5b9392505050565b60006020828403121561092157600080fd5b5035919050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220e198dec3ce53fdea96dffab561f0da766749899711c5313067da38a904ed117364736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c80638456cb591161007f578063d720e08911610059578063d720e089146101eb578063f2fde38b14610202578063fcae448414610222578063fe56f5a01461023757600080fd5b80638456cb59146101a65780638da5cb5b146101bb5780638f449a05146101e357600080fd5b80630b12323f146100d25780633f4ba83a1461011757806351cff8d91461012e5780635c975abb1461014e578063649677e11461016d578063715018a61461019157600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506101026100ed3660046108df565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c610257565b005b34801561013a57600080fd5b5061012c6101493660046108df565b610269565b34801561015a57600080fd5b50600054600160a01b900460ff16610102565b34801561017957600080fd5b5061018360025481565b60405190815260200161010e565b34801561019d57600080fd5b5061012c6103cc565b3480156101b257600080fd5b5061012c6103de565b3480156101c757600080fd5b506000546040516001600160a01b03909116815260200161010e565b61012c6103ee565b3480156101f757600080fd5b506001546101839081565b34801561020e57600080fd5b5061012c61021d3660046108df565b610519565b34801561022e57600080fd5b5061012c610592565b34801561024357600080fd5b5061012c61025236600461090f565b610669565b61025f6106ae565b610267610708565b565b6102716106ae565b6001600160a01b0381166102cc5760405162461bcd60e51b815260206004820152601760248201527f535542534352495054494f4e3a2041444452455353203000000000000000000060448201526064015b60405180910390fd5b60405147906000906001600160a01b0384169083908381818185875af1925050503d8060008114610319576040519150601f19603f3d011682016040523d82523d6000602084013e61031e565b606091505b505090508061036f5760405162461bcd60e51b815260206004820152601d60248201527f535542534352495054494f4e3a2057495448445241575f4641494c454400000060448201526064016102c3565b6000546001600160a01b03166001600160a01b0316836001600160a01b03167fa51bb7c2c2049ab09fbff5561211a4ee34b3b4cee74c42f1bce5461cd4ef3f8d846040516103bf91815260200190565b60405180910390a3505050565b6103d46106ae565b6102676000610758565b6103e66106ae565b6102676107a8565b6103f66107eb565b3360009081526003602052604090205460ff16156104565760405162461bcd60e51b815260206004820181905260248201527f535542534352495054494f4e3a20414c52454144595f5355425343524942454460448201526064016102c3565b6002543410156104b45760405162461bcd60e51b8152602060048201526024808201527f535542534352495054494f4e3a204e4f545f454e4f5547485f42414c414e43456044820152635f46454560e01b60648201526084016102c3565b6104c2600180546001019055565b33600081815260036020908152604091829020805460ff191660011790556002548251348152918201527ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f910160405180910390a2565b6105216106ae565b6001600160a01b0381166105865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c3565b61058f81610758565b50565b61059a6107eb565b3360009081526003602052604090205460ff166105f95760405162461bcd60e51b815260206004820152601c60248201527f535542534352495054494f4e3a204e4f545f535542534352494245440000000060448201526064016102c3565b600061060460015490565b1161061157610611610928565b61061b6001610838565b33600081815260036020908152604091829020805460ff1916905590519182527fae563681ccc696fae58fe830f401bc9c043a43ddb9f7c2830b32c3c70d9966e791015b60405180910390a1565b6106716106ae565b600281905560405181815233907f1004d8bfa7cdb21aa74a7128d4f5dd91f90a74171ce5e12b65861294fc3587ee9060200160405180910390a250565b6000546001600160a01b031633146102675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c3565b61071061088f565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200161065f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107b06107eb565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107403390565b600054600160a01b900460ff16156102675760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102c3565b8054806108875760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016102c3565b600019019055565b600054600160a01b900460ff166102675760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102c3565b6000602082840312156108f157600080fd5b81356001600160a01b038116811461090857600080fd5b9392505050565b60006020828403121561092157600080fd5b5035919050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220e198dec3ce53fdea96dffab561f0da766749899711c5313067da38a904ed117364736f6c634300080c0033",
  "devdoc": {
    "author": "Andro Labs Development Team.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "subscribe()": {
        "details": "Adds user to subscriber mapping and increase subscribers count."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unsubscribe()": {
        "details": "Decreases number of total subscribed users.Can only unsubscribe if subscribed previously."
      }
    },
    "title": "Subscription by Andro.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEntranceFee(uint256)": {
        "notice": "Let owner set entrance fee."
      },
      "subscribe()": {
        "notice": "Subscribe"
      },
      "unsubscribe()": {
        "notice": "Unsubscribed users will not be eligible."
      },
      "withdraw(address)": {
        "notice": "Let owner withdraw funds collected by the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 333,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "numOfSubscribers",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)248_storage"
      },
      {
        "astId": 335,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "entranceFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 339,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "subscriber",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)248_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 247,
            "contract": "contracts/Subscription.sol:Subscription",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}