{
  "language": "Solidity",
  "sources": {
    "contracts/Subscription.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Subscription is Ownable {\n\n    bool public available;\n    uint256 public numOfSubscribers;\n    uint256 public entranceFee;\n\n    mapping (address => bool) public subscriptions;\n\n    modifier isAvailable() {\n        require(available, \"SUBSCRIPTION: NOT_AVAILABLE\");\n        _;\n    }\n\n    event Revived(address owner);\n    event Terminated(address owner);\n    event Subscribed(address subscriber, uint256 paidFee, uint256 baseFee);\n    event Unsubscribed(address subscriber);\n    event Withdraw(uint256 balance, address to, address owner);\n    event EntranceFeeSet(uint256 fee, address owner);\n\n\n    constructor(\n        uint256 _entranceFee, \n        bool _available\n    ) {\n        entranceFee = _entranceFee;\n        available = _available;\n    }\n\n\n    function subscribe() \n        external\n        payable \n        isAvailable \n    {\n        require(msg.value >= entranceFee, \"SUBSCRIPTION: NOT_ENOUGH_BALANCE_FEE\");\n        require(!subscriptions[msg.sender], \"SUBSCRIPTION: ALREADY_SUBSCRIBED\");\n\n        numOfSubscribers += 1;\n        subscriptions[msg.sender] = true;\n\n        emit Subscribed(msg.sender, msg.value, entranceFee);\n    }\n\n    /** \n    Requirement added to prevent unexpected subscriber count decrease.\n    */\n    function unsubscribe() \n        external \n        isAvailable\n    {\n        require(subscriptions[msg.sender], \"SUBSCRIPTION: NOT_SUBSCRIBED\");\n        assert(numOfSubscribers > 0);\n\n        numOfSubscribers -= 1;\n        delete subscriptions[msg.sender];\n\n        emit Unsubscribed(msg.sender);\n    }\n\n    function revive() \n        external \n        onlyOwner \n    {\n        available = true;\n\n        emit Revived(msg.sender);\n    }\n\n    /** \n    Withdraw funds collected by the contract.\n    */\n    function withdraw(address _to) \n        external\n        onlyOwner\n    {\n        require(_to != address(0), \"SUBSCRIPTION: ADDRESS 0\");\n\n        uint256 contractBalance = address(this).balance;\n\n        (bool success, ) = _to.call{value: contractBalance}(\"\");\n        require(success, \"SUBSCRIPTION: WITHDRAW_FAILED\");\n\n        emit Withdraw(contractBalance, _to, msg.sender);\n    }\n\n    function terminate() \n        external \n        onlyOwner \n    {\n        available = false;\n\n        emit Terminated(msg.sender);\n    }\n\n    function setEntranceFee(uint256 _fee)\n        external\n        onlyOwner\n    {\n        entranceFee = _fee;\n\n        emit EntranceFeeSet(_fee, msg.sender);\n    }\n\n    receive() external payable {}\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}